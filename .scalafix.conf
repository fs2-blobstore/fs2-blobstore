rules = [
  Disable
  DisableSyntax           // Reports an error for disabled features such as var or XML literals.
  LeakingImplicitClassVal	// Adds 'private' to val parameters of implicit value classes
  NoValInForComprehension	// Removes deprecated val inside for-comprehension binders
]

DisableSyntax {
  noVars = true
  noThrows = true
  noNulls = true
  noReturns = true
  noWhileLoops = true
  noAsInstanceOf = true
  noIsInstanceOf = true
  noXml = true
  noDefaultArgs = false
  noFinalVal = true // https://github.com/sbt/zinc/issues/227
  noFinalize = true
  noValPatterns = true
  noUniversalEquality = false
  noUniversalEqualityMessage = "== and != are unsafe since they allow comparing two unrelated types"
}

Disable.symbols = [
  "scala.None.get"
  "scala.Some.get"
  "scala.Option.get"
  "scala.util.Either.LeftProjection.get"
  "scala.util.Either.RightProjection.get"
  "scala.util.Try.get"
  "scala.util.Failure.get"
  "scala.util.Success.get"
  {
    regex = "^\\Qjava/net/URL#\\E[^(.toURI)]*$"
    message = "URL talks to the network for equality, prefer URI"
  }
  {
    symbol = "scala/Enumeration"
    message = "prefer Enumeratum or a sealed abstract class"
  }
]

Disable.ifSynthetic = [
  {
    regex = {
      includes = [
        "^\\Qscala/collection/MapLike#apply().\\E$"
        "^\\Qscala/collection/LinearSeqOptimized#apply().\\E$"
      ]
    }
    message = "not a total function"
  }
  {
    regex = {
      includes = [
        "^\\Qscala/collection/immutable/MapLike#filterKeys().\\E$"
        "^\\Qscala/collection/MapLike#filterKeys().\\E$"
        "^\\Qscala/collection/immutable/MapLike#mapValues().\\E$"
        "^\\Qscala/collection/MapLike#mapValues().\\E$"
      ]
    }
    message = "mapValues and filterKeys are broken"
  }
  "scala.Any"
  "java.io.Serializable"
  "scala.Predef.any2stringadd"
]