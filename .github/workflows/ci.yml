name: CI

on:
  pull_request:
    branches: ['*']
  push:
    branches: [ master ]
    paths-ignore:
      - 'README.md'
      - 'docs/**'

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  scalafmt:
    name: Formatting
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v2.4.0
      - name: Check format
        run: |
          version=$(sed -E "s/(\/\/|#).*//g" .scalafmt.conf | grep "version" | sed -E "s/version|=|\"|\s*//g")
          curl https://raw.githubusercontent.com/scalameta/scalafmt/master/bin/install-scalafmt-native.sh | \
          sudo bash -s -- $version /usr/local/bin/scalafmt-native
          echo "=============================================================================="
          echo "Config:"
          cat .scalafmt.conf
          echo "=============================================================================="
          echo "scalafmt-native --list"
          scalafmt-native --list

  tests:
    name: Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [scalafmt]
    strategy:
      matrix:
        scala: [ 2.12.14, 2.13.6, 3.0.2 ]
    steps:
      - name: Checkout current branch (fast)
        uses: actions/checkout@v2.4.0

      - name: Cache project dependencies between workflow runs
        uses: coursier/cache-action@v6

      - name: Compile all sources
        run: sbt ++${{ matrix.scala }} 'all compile Test/compile IntegrationTest/compile doc'

      - name: Compile readme
        run: sbt ++${{ matrix.scala }} docs/mdoc

      - name: Run Scalafix
        run: sbt ++${{ matrix.scala }} 'scalafixAll --check'

      - name: Create tmp directory
        run: mkdir tmp

      - name: Test with coverage
        if: ${{ matrix.scala != '3.0.2' }}
        run: sbt ++${{ matrix.scala }} '; coverage ; testOnly * -- -l blobstore.IntegrationTest'

      - name: Test without coverage
        if: ${{ matrix.scala == '3.0.2' }}
        run: sbt ++${{ matrix.scala }} 'testOnly * -- -l blobstore.IntegrationTest'

      - name: Publish JUnit test report
        if: always() # publish report when tests fail
        uses: mikepenz/action-junit-report@v2.7.0
        with:
          github_token: ${{ github.token }}
          report_paths: '**/target/test-reports/*.xml'

      - name: Generate coverage report
        if: ${{ matrix.scala != '3.0.2' }}
        run: sbt ++${{ matrix.scala }} coverageReport

      - name: Upload code coverage to codecov
        uses: codecov/codecov-action@v2.1.0
        with:
          flags: scala-${{ matrix.scala }}

  integration-tests:
    name: Integration tests
    if: github.actor != 'dependabot[bot]' && (github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository))
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [scalafmt, tests]
    steps:
      - name: Checkout current branch (fast)
        uses: actions/checkout@v2.4.0

      - name: Cache project dependencies between workflow runs
        uses: coursier/cache-action@v6

      - name: Compile all sources
        run: sbt 'all compile Test/compile IntegrationTest/compile doc'

      - name: Create tmp directory
        run: mkdir tmp

      - name: Decrypt Box App Key
        run: openssl aes-256-cbc -K ${{ secrets.OPENSSL_KEY }} -iv ${{ secrets.OPENSSL_IV }} -in box/src/test/resources/box_appkey.json.enc -out box/src/test/resources/box_appkey.json -d

      - name: Test
        run: sbt '; coverage ; testOnly * -- -n blobstore.IntegrationTest'

      - name: Publish JUnit test report
        if: always() # publish report when tests fail
        uses: mikepenz/action-junit-report@v2.7.0
        with:
          github_token: ${{ github.token }}
          report_paths: '**/target/test-reports/*.xml'

      - name: Generate coverage report
        run: sbt coverageReport

      - name: Upload code coverage to codecov
        uses: codecov/codecov-action@v2.1.0
        with:
          flags: scala-it
